import com.google.gson.*;
import com.google.gson.reflect.*;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.awt.Color;
import java.util.prefs.*;
import java.time.*;


public class ClockIn extends javax.swing.JFrame {
    private static Preferences prefs;
    static HashMap<Integer, ArrayList<Long>> hourLog = new HashMap<Integer, ArrayList<Long>>();
    private Boolean isClockedIn = false;
    long clockedInTime = 0;
    long timeWorkedToday = 0;
    long timeWorkedInWeek = 0;
    static Gson gson = new Gson();

    public ClockIn() {
        initComponents();
        setInterval(1000);
        prefs = Preferences.userNodeForPackage(this.getClass());
        getPrefs(prefs);
        setLocalStateFromPrefs();
        if (clockedInTime == 0) {
            clockInOutAtLabel.setText("Currently clocked out");
            clockInOutAtTime.setText("");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        tab1 = new javax.swing.JPanel();
        clockinBtn = new javax.swing.JButton();
        dayHoursLabel = new javax.swing.JLabel();
        weekHoursLabel = new javax.swing.JLabel();
        dayHours = new javax.swing.JLabel();
        weekHours = new javax.swing.JLabel();
        clockInOutAtLabel = new javax.swing.JLabel();
        clockInOutAtTime = new javax.swing.JLabel();
        tab2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clock In");

        tab1.setBackground(new java.awt.Color(255, 255, 255));

        clockinBtn.setBackground(new java.awt.Color(68, 214, 149));
        clockinBtn.setText("CLOCK IN");
        clockinBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clockinBtnActionPerformed(evt);
            }
        });

        dayHoursLabel.setText("Total hours worked today:");

        weekHoursLabel.setText("Total hours worked this week:");

        dayHours.setText("8");

        weekHours.setText("34");

        clockInOutAtLabel.setText("Clocked In At:");

        clockInOutAtTime.setText("12:00");

        javax.swing.GroupLayout tab1Layout = new javax.swing.GroupLayout(tab1);
        tab1.setLayout(tab1Layout);
        tab1Layout.setHorizontalGroup(
            tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1Layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addGroup(tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(weekHoursLabel)
                    .addComponent(dayHoursLabel)
                    .addComponent(clockInOutAtLabel))
                .addGap(18, 18, 18)
                .addGroup(tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weekHours)
                    .addComponent(dayHours)
                    .addComponent(clockInOutAtTime)))
            .addGroup(tab1Layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addComponent(clockinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        tab1Layout.setVerticalGroup(
            tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(clockinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clockInOutAtLabel)
                    .addComponent(clockInOutAtTime))
                .addGap(15, 15, 15)
                .addGroup(tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayHoursLabel)
                    .addComponent(dayHours))
                .addGap(18, 18, 18)
                .addGroup(tab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weekHoursLabel)
                    .addComponent(weekHours))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("ClockIn/ClockOut", tab1);

        tab2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout tab2Layout = new javax.swing.GroupLayout(tab2);
        tab2.setLayout(tab2Layout);
        tab2Layout.setHorizontalGroup(
            tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 654, Short.MAX_VALUE)
        );
        tab2Layout.setVerticalGroup(
            tab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("View/Edit Week Summary", tab2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        pack();
    }// </editor-fold>

    void getPrefs(Preferences prefs) {
        timeWorkedToday = prefs.getLong("timeWorkedToday", 0);
        timeWorkedInWeek = prefs.getLong("timeWorkedInWeek", 0);
        String log = prefs.get("hourLog", "noSavedHourLog");
        if (log == "noSavedHourLog") {
            initializeHourLog();
        } else {
            java.lang.reflect.Type type = new TypeToken<HashMap<Integer, ArrayList<Long>>>(){}.getType();
            hourLog = gson.fromJson(log, type);
        }
        printHourLog();

    }

    void setLocalStateFromPrefs() {
        String hoursForDay = getHoursMinutesFromMs(timeWorkedToday);
        dayHours.setText(hoursForDay);
        String hoursForWeek = getHoursMinutesFromMs(timeWorkedInWeek);
        weekHours.setText(hoursForWeek);
    }

    static long getCurrentTime() {
        return System.currentTimeMillis();
    }

    void setInterval(int interval) {
        new Timer().scheduleAtFixedRate(new TimerTask(){
            @Override
            public void run(){
                if (isClockedIn) {
                    long time = getCurrentTime();
                    long diff = getDiffFromTimes(time, clockedInTime);
                    String hoursToday = getHoursMinutesFromMs(diff + timeWorkedToday);
                    String hoursWeek = getHoursMinutesFromMs(diff + timeWorkedInWeek);
                    dayHours.setText(hoursToday);
                    weekHours.setText(hoursWeek);
                }
            }
        },0, interval);
    }

    static ZonedDateTime getDateFromMS(long ms) {
        return ZonedDateTime.ofInstant(Instant.ofEpochMilli(ms), ZoneId.systemDefault());
    }

    static long getMSFromDate(Date date) {
        return date.toInstant().toEpochMilli();
    }

    static long getDiffFromTimes(long t1, long t2) {
        return Math.abs(t1 - t2);
    }

    static String getHoursMinutesFromMs(long ms) {
        return String.format("%d hours, %d mins, %d secs",
            TimeUnit.MILLISECONDS.toHours(ms) % 24,
            TimeUnit.MILLISECONDS.toMinutes(ms) % 60,
            TimeUnit.MILLISECONDS.toSeconds(ms) % 60
        );
    }

    static int[] getHoursMinutesFromDate(ZonedDateTime date) {
        int[] a = { date.getHour(), date.getMinute() };
        return a;
    }

    static String formatDate(Date date) {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return df.format(date);
    }

//    static void addTime(Integer day) {
//        ArrayList<Long> l = new ArrayList<Long>();
//        hourLog.put(day, l);
//    }

    static void addTimeToLog(int day, long ms) {
        ArrayList<Long> times = hourLog.get(day);
        times.add(ms);
        prefs.put("hourLog", gson.toJson(hourLog)); // put in hook when app closes
    }

    static void updateHourLog(int day, long ms, int index) {
        ArrayList<Long> times = hourLog.get(day);
        times.set(index, ms);
    }

    static void initializeHourLog() {
        for (int i = 1; i < 8; i++) {
            ArrayList<Long> l = new ArrayList<Long>();
            hourLog.put(i, l);
        }
    }

    static void printHourLog() {
         hourLog.forEach((k, v) -> {
            System.out.println(k + ": " + v);
        });
    }

    private void clockinBtnActionPerformed(java.awt.event.ActionEvent evt) {
        isClockedIn = !isClockedIn;
        long time = getCurrentTime();
        ZonedDateTime date = getDateFromMS(time);
        clockInOutAtTime.setText(date.toString());
        int day = date.getDayOfWeek().getValue();
        addTimeToLog(day, time);
        printHourLog();
        if (isClockedIn) {
            clockedInTime = time;
            clockinBtn.setText("CLOCK OUT");
            clockinBtn.setBackground(new Color(254,117,54));
            clockInOutAtLabel.setText("Clocked In at:");
        } else {
            clockinBtn.setText("CLOCK IN");
            clockinBtn.setBackground(new Color(68,214,149));
            clockInOutAtLabel.setText("Clocked Out at:");
            long diff = getDiffFromTimes(time, clockedInTime);
            timeWorkedToday += diff;
            timeWorkedInWeek += diff;
            prefs.putLong("timeWorkedToday", timeWorkedToday);
            prefs.putLong("timeWorkedInWeek", timeWorkedInWeek);
            String hoursToday = getHoursMinutesFromMs(timeWorkedToday);
            String hoursWeek = getHoursMinutesFromMs(timeWorkedInWeek);
            dayHours.setText(hoursToday);
            weekHours.setText(hoursWeek);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>



        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClockIn c = new ClockIn();
                c.setVisible(true);
//                c.addWindowListener(new WindowAdapter() {
//                    public void windowClosing(WindowEvent e) {System.exit(0);}
//                    public void windowDeiconified(WindowEvent e) { demo.open(); }
//                    public void windowIconified(WindowEvent e) { demo.close(); }
//                });
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel clockInOutAtLabel;
    private javax.swing.JLabel clockInOutAtTime;
    private javax.swing.JButton clockinBtn;
    private javax.swing.JLabel dayHours;
    private javax.swing.JLabel dayHoursLabel;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JPanel tab1;
    private javax.swing.JPanel tab2;
    private javax.swing.JLabel weekHours;
    private javax.swing.JLabel weekHoursLabel;
    // End of variables declaration
}
